import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { TextField, Button, MenuItem, Paper, Box, Typography, Alert, Grid, Card, CardContent, CardMedia, CardHeader } from '@mui/material';

const AddDriver = () => {
  const [name, setName] = useState('');
  const [gender, setGender] = useState('');
  const [email, setEmail] = useState('');
  const [cnic, setCnic] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [dateOfBirth, setDateOfBirth] = useState('');
  const [ratings, setRatings] = useState(0);
  const [vehicleBrand, setVehicleBrand] = useState('');
  const [vehicleName, setVehicleName] = useState('');
  const [vehicleColor, setVehicleColor] = useState('');
  const [vehicleID, setVehicleID] = useState('');
  const [vehicleType, setVehicleType] = useState('');
  const [vehicleProductionYear, setVehicleProductionYear] = useState('');
  const [licenseNumber, setLicenseNumber] = useState('');
  const [vehiclePhotos, setVehiclePhotos] = useState([]);
  const [vehicleRegistrationFront, setVehicleRegistrationFront] = useState(null);
  const [vehicleRegistrationBack, setVehicleRegistrationBack] = useState(null);
  const [cnicFront, setCnicFront] = useState(null);
  const [cnicBack, setCnicBack] = useState(null);
  const [driverPhoto, setDriverPhoto] = useState(null);
  const [error, setError] = useState('');

  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(''); // Clear previous error

    // Validation logic for driver fields
    if (!name.trim()) {
      setError('Name is required and cannot be empty.');
      return;
    }
    if (!['Male', 'Female'].includes(gender)) {
      setError('Gender must be either "Male" or "Female".');
      return;
    }
    if (!email.match(/^\S+@\S+\.\S+$/)) {
      setError('Please provide a valid email address.');
      return;
    }
    if (!phoneNumber.match(/^((\+92)|0)(3[0-9]{2})[0-9]{7}$/)) {
      setError('Phone number must be a valid Pakistani number.');
      return;
    }
    if (!cnic.match(/^\d{5}-\d{7}-\d{1}$/)) {
      setError('CNIC must be in the format XXXXX-XXXXXXX-X.');
      return;
    }
    if (!dateOfBirth) {
      setError('Date of Birth is required.');
      return;
    }

    // Validation logic for vehicle fields
    if (!vehicleName.trim()) {
      setError('Vehicle Name is required.');
      return;
    }
    if (!licenseNumber.trim()) {
      setError('License Number is required.');
      return;
    }
    if (!vehicleID.trim()) {
      setError('Vehicle ID is required.');
      return;
    }

    const newDriver = { name, gender, email, phoneNumber, cnic, dateOfBirth, ratings, driverPhoto };
   
       
    const formData = new FormData();
  

    // Append vehicle fields to formData
  formData.append('vehicleBrand', vehicleBrand);
  formData.append('vehicleName', vehicleName);
  formData.append('vehicleColor', vehicleColor);
  formData.append('vehicleID', vehicleID);
  formData.append('vehicleType', vehicleType);
  formData.append('vehicleProductionYear', vehicleProductionYear);
  formData.append('licenseNumber', licenseNumber);
  formData.append('vehicleRegistrationFront', vehicleRegistrationFront);
  formData.append('vehicleRegistrationBack', vehicleRegistrationBack);
  formData.append('cnicFront', cnicFront);
  formData.append('driverPhoto', driverPhoto);
  formData.append('cnicBack', cnicBack);
  vehiclePhotos.forEach(photo => {
    formData.append('vehiclePhotos', photo); // Append each file
  });
      console.log(vehiclePhotos)
 
    try {
      const driverResponse = await fetch('http://localhost:5000/drivers', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ...newDriver }),
      });
      const driverResult = await driverResponse.json();

      if (driverResponse.ok) {
        formData.append('driverId', driverResult._id);

        const vehicleResponse = await fetch('http://localhost:5000/vehicles', {
          method: 'POST',
           body: formData,
         });
        const vehicleResult = await vehicleResponse.json();
        
        if (vehicleResponse.ok) {
          navigate('/drivers'); // Navigate back to drivers list page after success
        } else {
          setError(vehicleResult.message || 'Error saving vehicle. Please try again.');
        }
      } else {
        setError(driverResult.message || 'Error saving driver. Please try again.');
      }
    } catch (error) {
      console.error('Error saving data:', error);
      setError('Error saving data. Please try again.');
    }
  };

  const handleCnicChange = (e) => {
    let value = e.target.value.replace(/\D/g, ''); // Remove non-digit characters
    if (value.length > 5) value = value.slice(0, 5) + '-' + value.slice(5); // Insert first hyphen
    if (value.length > 14) value = value.slice(0, 14); // Limit to 13 characters
    if (value.length > 13) value = value.slice(0, 13) + '-' + value.slice(13); // Insert second hyphen
    setCnic(value); // Update CNIC value
  };

  

  const handleVehiclePhotosChange = (e) => {
    const files = Array.from(e.target.files);
    setVehiclePhotos(files);
    console.log('Images selected:', files); // Log the files directly

  };

  return (
    <Box sx={{ maxWidth: '100%', margin: 'auto', padding: 2 }}>
      <Paper sx={{ padding: 3, boxShadow: 3 }}>
        <Typography variant="h5" component="h1" align="left" gutterBottom>
          Add New Driver 
        </Typography>

        {error && <Alert severity="error" sx={{ marginBottom: 2 }}>{error}</Alert>}

        <form onSubmit={handleSubmit}>
          <Grid container spacing={3}>
            {/* Driver Details */}
            <Grid item xs={12} sm={6}>
              <Card sx={{ height: '100%' }}>
                <CardContent>
                <Typography variant="h6" component="div" align='center' gutterBottom>
      Driver Details
    </Typography>
                  <TextField
                    label="Name"
                    variant="outlined"
                    fullWidth
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    margin="normal"
                  />
                  <TextField
                    label="Gender"
                    variant="outlined"
                    fullWidth
                    select
                    value={gender}
                    onChange={(e) => setGender(e.target.value)}
                    margin="normal"
                  >
                    <MenuItem value="Male">Male</MenuItem>
                    <MenuItem value="Female">Female</MenuItem>
                  </TextField>
                  <TextField
                    label="Email"
                    variant="outlined"
                    type="email"
                    fullWidth
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    margin="normal"
                  />
                  <TextField
                    label="Phone Number"
                    variant="outlined"
                    type="tel"
                    fullWidth
                    value={phoneNumber}
                    onChange={(e) => setPhoneNumber(e.target.value)}
                    margin="normal"
                  />
                  <TextField
                    label="CNIC"
                    variant="outlined"
                    fullWidth
                    value={cnic}
                    onChange={handleCnicChange}
                    margin="normal"
                  />
                  <TextField
                    label="Date of Birth"
                    variant="outlined"
                    type="date"
                    fullWidth
                    value={dateOfBirth}
                    onChange={(e) => setDateOfBirth(e.target.value)}
                    margin="normal"
                    InputLabelProps={{ shrink: true }}
                  />
                   {/* Image Uploads */}
          <Box sx={{ marginTop: 2 }}>
            <Typography variant="h6">CNIC Front</Typography>
            <input
              type="file"
              onChange={e => { setCnicFront(e.target.files[0]) }}
              accept="image/*"
            />
            {cnicFront && (
              <Box sx={{ marginTop: 1 }}>
                <img src={URL.createObjectURL(cnicFront)} alt="CNIC Front Preview" width="100%" />
              </Box>
            )}
          </Box>

          <Box sx={{ marginTop: 2 }}>
            <Typography variant="h6">CNIC Back</Typography>
            <input
              type="file"
              onChange={e => { setCnicBack(e.target.files[0]) }}
              accept="image/*"
            />
            {cnicBack && (
              <Box sx={{ marginTop: 1 }}>
                <img src={URL.createObjectURL(cnicBack)} alt="CNIC Back Preview" width="100%" />
              </Box>
            )}
          </Box>
                </CardContent>
              </Card>
            </Grid>

            {/* Vehicle Details */}
            <Grid item xs={12} sm={6}>
              <Card sx={{ height: '100%' }}>
                <CardContent>
                <Typography variant="h6" component="div" align='center' gutterBottom>
      Vehicle Details
    </Typography>
                  <TextField
                    label="Vehicle Brand"
                    variant="outlined"
                    fullWidth
                    value={vehicleBrand}
                    onChange={(e) => setVehicleBrand(e.target.value)}
                    margin="normal"
                  />
                  <TextField
                    label="Vehicle Name"
                    variant="outlined"
                    fullWidth
                    value={vehicleName}
                    onChange={(e) => setVehicleName(e.target.value)}
                    margin="normal"
                  />
                  <TextField
                    label="Vehicle Color"
                    variant="outlined"
                    fullWidth
                    value={vehicleColor}
                    onChange={(e) => setVehicleColor(e.target.value)}
                    margin="normal"
                  />
                  <TextField
                    label="Vehicle ID"
                    variant="outlined"
                    fullWidth
                    value={vehicleID}
                    onChange={(e) => setVehicleID(e.target.value)}
                    margin="normal"
                  />
                  <TextField
                    label="Vehicle Type"
                    variant="outlined"
                    fullWidth
                    select
                    value={vehicleType}
                    onChange={(e) => setVehicleType(e.target.value)}
                    margin="normal"
                  >
                    <MenuItem value="AC Car">AC Car</MenuItem>
                    <MenuItem value="Mini Car">Mini Car</MenuItem>
                    <MenuItem value="Rickshaw">Rickshaw</MenuItem>
                    <MenuItem value="Bike">Bike</MenuItem>
                  </TextField>
                  <TextField
                    label="Vehicle Production Year"
                    variant="outlined"
                    fullWidth
                    value={vehicleProductionYear}
                    onChange={(e) => setVehicleProductionYear(e.target.value)}
                    margin="normal"
                  />
                  <TextField
                    label="License Number"
                    variant="outlined"
                    fullWidth
                    value={licenseNumber}
                    onChange={(e) => setLicenseNumber(e.target.value)}
                    margin="normal"
                  />
                </CardContent>
              </Card>
            </Grid>
          </Grid>

           
                
        
           {/* Vehicle Image Uploads */}
        <Card sx={{ marginBottom: 2 }}>
          <CardContent>
            <Typography variant="h6">Vehicle Registration Uploads</Typography>
            <Box sx={{ marginTop: 2 }}>
              <Typography variant="h6">Vehicle Registration Front</Typography>
              <input
                type="file"
                onChange={e => { setVehicleRegistrationFront(e.target.files[0]) }}
                accept="image/*"
              />
              {vehicleRegistrationFront && (
                <Box sx={{ marginTop: 1 }}>
                  <img src={URL.createObjectURL(vehicleRegistrationFront)} alt="Vehicle Registration Front Preview" width="100%" />
                </Box>
              )}
            </Box>

            <Box sx={{ marginTop: 2 }}>
              <Typography variant="h6">Vehicle Registration Back</Typography>
              <input
                type="file"
                onChange={e => { setVehicleRegistrationBack(e.target.files[0]) }}
                accept="image/*"
              />
              {vehicleRegistrationBack && (
                <Box sx={{ marginTop: 1 }}>
                  <img src={URL.createObjectURL(vehicleRegistrationBack)} alt="Vehicle Registration Back Preview" width="100%" />
                </Box>
              )}
            </Box>
          </CardContent>
        </Card>

        {/* Vehicle Photos */}
        <Card sx={{ marginBottom: 2 }}>
          <CardContent>
            <Typography variant="h6">Vehicle Photos</Typography>
            <input
              type="file"
              onChange={handleVehiclePhotosChange}
              accept="image/*"
              multiple
            />
            {vehiclePhotos.length > 0 && (
              <Box sx={{ marginTop: 1 }}>
                <Typography variant="body2">Selected Photos:</Typography>
                <ul>
                  {vehiclePhotos.map((photo, index) => (
                    <li key={index}>{photo.name}</li>  // Display file name
                  ))}
                </ul>
                {vehiclePhotos.map((photo, index) => (
                  <img
                    key={index}
                    src={URL.createObjectURL(photo)}  // Show image preview
                    alt={`Vehicle Photo ${index + 1}`}
                    width="100%"  // Adjust width as needed
                    style={{ marginBottom: 10 }}
                  />
                ))}
              </Box>
            )}
          </CardContent>
        </Card>

        <Button variant="contained" color="primary" fullWidth type="submit">
          Add Driver
        </Button>
      </form>
    </Paper>
  </Box>
);
};

 
export default AddDriver;
  